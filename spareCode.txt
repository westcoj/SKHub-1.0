# Jamie:
# self.editList = editList
# self.skm = skm
# wx.Frame.__init__(self, None, title='Playlist Management', size=(725, 400))
#
# for x in self.skm.skdbGetAll():
#     if (x == '_defPlaylist_OLD' or x == editList):
#         pass
#     elif (x == 'defPlaylist'):
#         self.mediaDisplay.Append('Library')
#     else:
#         self.mediaDisplay.Append(x)
# self.Bind(wx.EVT_LISTBOX_DCLICK, self.chooseList, self.mediaDisplay
#
# for x in self.skm.skdbGetList('defPlaylist'):
#     self.songDisplay.Append(x.title, x)
# self.Bind(wx.EVT_LISTBOX_DCLICK, self.addItem, self.songDisplay)
#
# self.editDisplay = wx.ListBox(self.panel, size=(200, 300), style=wx.LB_EXTENDED | wx.LB_HSCROLL, choices=[])
# for x in self.skm.skdbGetList(editList):
#     self.editDisplay.Append(x.title, x)
# self.Bind(wx.EVT_LISTBOX_DCLICK, self.remItem, self.editDisplay)
#
#
#
# font = wx.Font(18, wx.ROMAN, wx.ITALIC, wx.NORMAL)
# lbl1 = wx.StaticText(self.panel, -1, style=wx.ALIGN_CENTER)
# lbl2 = wx.StaticText(self.




    # if (self.mediaDisplay.GetString(self.mediaDisplay.GetSelection()) == 'Library'):
    #     wx.MessageBox("DONT DO THAT", "ERROR", wx.ICON_EXCLAMATION | wx.OK)
    #     return
    # secondFrame = SKEditFrame(self.skm, self.mediaDisplay.GetString(self.mediaDisplay.GetSelection()))
    # secondFrame.Show()



    ########################################################################
    # class SKEditFrame(wx.Frame):
    #     '''
    #     Method that handles editing playlists frame
    #     '''
    #
    #     def __init__(self, skm, editList):
    #         '''
    #         Gets passed the original and mediaManager
    #         '''
    #         self.editList = editList
    #         self.skm = skm
    #         wx.Frame.__init__(self, None, title='Playlist Management', size=(725, 400))
    #         self.panel = wx.Panel(self)
    #
    #         # Playlist choice display
    #         # self.mediaDisplay = wx.ListBox(self.panel, size=(200, 300), style=wx.LB_HSCROLL, choices=[])
    #
    #
    #         # for x in self.skm.skdbGetAll():
    #         #     if (x == '_defPlaylist_OLD' or x == editList):
    #         #         pass
    #         #     elif (x == 'defPlaylist'):
    #         #         self.mediaDisplay.Append('Library')
    #         #     else:
    #         #         self.mediaDisplay.Append(x)
    #         # self.Bind(wx.EVT_LISTBOX_DCLICK, self.chooseList, self.mediaDisplay)
    #         #
    #         # # Create songs list display
    #         # self.songDisplay = wx.ListBox(self.panel, size=(200, 300), style=wx.LB_EXTENDED | wx.LB_HSCROLL, choices=[])
    #         # for x in self.skm.skdbGetList('defPlaylist'):
    #         #     self.songDisplay.Append(x.title, x)
    #         # self.Bind(wx.EVT_LISTBOX_DCLICK, self.addItem, self.songDisplay)
    #         #
    #         # self.editDisplay = wx.ListBox(self.panel, size=(200, 300), style=wx.LB_EXTENDED | wx.LB_HSCROLL, choices=[])
    #         # for x in self.skm.skdbGetList(editList):
    #         #     self.editDisplay.Append(x.title, x)
    #         # self.Bind(wx.EVT_LISTBOX_DCLICK, self.remItem, self.editDisplay)
    #         #
    #         #
    #         #
    #         # font = wx.Font(18, wx.ROMAN, wx.ITALIC, wx.NORMAL)
    #         # lbl1 = wx.StaticText(self.panel, -1, style=wx.ALIGN_CENTER)
    #         # lbl2 = wx.StaticText(self.panel, -1, style=wx.ALIGN_CENTER)
    #         # lbl3 = wx.StaticText(self.panel, -1, style=wx.ALIGN_CENTER)
    #         # lbl4 = wx.StaticText(self.panel, -1, style=wx.ALIGN_CENTER)
    #         #
    #         # lbl1.SetFont(font)
    #         # lbl1.SetLabel('Playlist')
    #         # lbl2.SetFont(font)
    #         # lbl2.SetLabel('Songs')
    #         # lbl3.SetFont(font)
    #         # lbl3.SetLabel(editList + ': Songs')
    #         # lbl4.SetLabel(' ')
    #         # sizer = wx.GridBagSizer(0, 0)
    #         # sizer.Add(lbl1, pos=(0, 0), flag=wx.ALL, border=5)
    #         # sizer.Add(lbl2, pos=(0, 1), flag=wx.ALL, border=5)
    #         # sizer.Add(lbl3, pos=(0, 3), flag=wx.ALL, border=5)
    #         # sizer.Add(self.mediaDisplay, pos=(1, 0), span=(9, 0), flag=wx.EXPAND, border=5)
    #         # sizer.Add(self.songDisplay, pos=(1, 1), span=(9, 1), flag=wx.EXPAND, border=5)
    #         # sizer.Add(self.editDisplay, pos=(1, 3), span=(9, 1), flag=wx.EXPAND, border=5)
    #         # sizer.Add(self.addBtn, pos=(4, 2), flag=wx.ALL, border=5)
    #         # sizer.Add(self.remBtn, pos=(5, 2), flag=wx.ALL, border=5)
    #
    #         buttonSizer = wx.BoxSizer(wx.VERTICAL)
    #         sourceSizer = wx.BoxSizer(wx.VERTICAL)
    #
    #         #-----------------------------------------------------------------------
    #         # LIST THAT DISPLAY WHERE THE SONGS ARE CHOSEN FROM
    #         sourceLabel = wx.StaticText(self.panel, -1, style=wx.ALIGN_CENTER)
    #         sourceLabel.SetLabel('Choose a Source:')
    #
    #         choiceList = ['Source','Albums','Artists','Library']
    #         self.choiceBox = wx.Choice(self.panel,choices=choiceList)
    #         self.choiceBox.Bind(wx.EVT_CHOICE,self.sourceChoice)
    #
    #         self.mediaDisplay = wx.ListBox(self.panel, size=(175, 300), style=wx.LB_HSCROLL | wx.LB_SINGLE, choices=[])
    #         self.Bind(wx.EVT_LISTBOX_DCLICK, self.chooseList, self.mediaDisplay)
    #
    #         sourceSizer.Add(sourceLabel, 1, wx.ALL, border=10)
    #         sourceSizer.Add(self.choiceBox, 0, wx.ALL, border=10)
    #         sourceSizer.Add(self.mediaDisplay, 0, wx.ALL, border=10)
    #
    #         #-----------------------------------------------------------------------
    #         # Add and Remove song buttons from playlist panel
    #         self.addBtn = wx.Button(self.panel, label='Add')
    #         self.addBtn.Bind(wx.EVT_BUTTON, self.addItems)
    #         self.remBtn = wx.Button(self.panel, label='Remove')
    #         self.remBtn.Bind(wx.EVT_BUTTON, self.remItems)
    #         buttonSizer.Add(self.addBtn, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_CENTER_HORIZONTAL)
    #         buttonSizer.Add(self.remBtn, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_CENTER_HORIZONTAL)
    #
    #         #-----------------------------------------------------------------------
    #         # LAST LIST THAT SHOWS THE PLAYLISTS CONTENTS
    #
    #         #-----------------------------------------------------------------------
    #         # ADDING BOTH BOX SIZERS TO THE TOP BOX SIZER
    #         listsSizer = wx.BoxSizer(wx.HORIZONTAL)
    #         listsSizer.Add(sourceSizer)
    #         listsSizer.Add(buttonSizer, wx.ALIGN_CENTER)
    #
    #         #-----------------------------------------------------------------------
    #         # BOTTOM BOX SIZER - JUST BUTTONS THAT USER CAN CLICK
    #         self.saveBtn = wx.Button(self.panel, label='Save Playlist')
    #         # JAMIE: self.saveBtn.Bind(wx.EVT_BUTTON, self.savePlaylist)
    #         self.cancelBtn = wx.Button(self.panel, label='Cancel')
    #         # JAMIE: self.cancelBtn.Bind(wx.EVT_BUTTON, self.cancelPlaylist)
    #         saveSizer = wx.BoxSizer(wx.HORIZONTAL)
    #         saveSizer.Add(self.cancelBtn, flag=wx.LEFT, border=250)
    #         saveSizer.Add(self.saveBtn, flag=wx.RIGHT, border=5)
    #
    #         #-----------------------------------------------------------------------
    #         # ADDING BOTH TOP AND BOTTOM BOX SIZERS TO MAIN SIZER
    #         self.overallSizer = wx.BoxSizer(wx.VERTICAL)
    #         self.overallSizer.Add(listsSizer, flag=wx.ALIGN_TOP, border=1)
    #         self.overallSizer.Add(saveSizer, flag=wx.ALIGN_BOTTOM, border=1)
    #
    #         self.panel.SetSizer(overallSizer)
    #         self.panel.Layout()
    #
    #     def sourceChoice(self, event):
    #         option = self.choiceBox.GetString(self.choiceBox.GetSelection())
    #         if(option == '' or option == 'Source' ):
    #             return
    #         if(option == 'Albums'):
    #             # change list to display album info
    #             self.mediaDisplay.SetString(1,"albums chosen")
    #         elif(option == 'Artists'):
    #             # change list to display artist info
    #             self.mediaDisplay.SetString(1,"artists chosen")
    #         elif(option == 'Playlists'):
    #             # change to display playlists
    #             self.mediaDisplay.SetString(1,"playlists chosen")
    #
    #
    #     def chooseList(self, event):
    #         '''
    #         Method that populates song list from chosen playlist
    #         '''
    #         self.songDisplay.Clear()
    #         name = self.mediaDisplay.GetString(self.mediaDisplay.GetSelection())
    #         if (name == 'Library'):
    #             name = 'defPlaylist'
    #         for x in self.skm.skdbGetList(name):
    #             self.songDisplay.Append(x.title, x)
    #
    #     def addItems(self, event):
    #         '''
    #         Method that adds chosen songs to list
    #         '''
    #         toAdd = self.songDisplay.GetSelections()
    #         skFToAdd = []
    #         for x in toAdd:
    #             skFToAdd.append(self.songDisplay.GetClientData(x))
    #         if (len(toAdd) < 1):
    #             # ERROR
    #             # wx.MessageBox("DONT DO THAT","ERROR",wx.ICON_EXCLAMATION|wx.OK)
    #             return
    #         self.skm.skdbUpdateListMany(1, self.editList, skFToAdd)
    #         self.editDisplay.Clear()
    #         for x in self.skm.skdbGetList(self.editList):
    #             self.editDisplay.Append(x.title, x)
    #
    #     def addItem(self, event):
    #         '''
    #         Method that adds a singular song from double click
    #         '''
    #         toAdd = self.songDisplay.GetSelections()
    #         if (len(toAdd) < 1):
    #             # ERROR
    #             # wx.MessageBox("DONT DO THAT","ERROR",wx.ICON_EXCLAMATION|wx.OK)
    #             return
    #         for x in toAdd:
    #             self.skm.skdbUpdateList(1, self.editList, self.songDisplay.GetClientData(x))
    #         self.editDisplay.Clear()
    #         for x in self.skm.skdbGetList(self.editList):
    #             self.editDisplay.Append(x.title, x)
    #
    #     def remItems(self, event):
    #         '''
    #         Method that removes chosen songs from edit list
    #         '''
    #         toRem = self.editDisplay.GetSelections()
    #         skFToRem = []
    #         for x in toRem:
    #             skFToRem.append(self.editDisplay.GetClientData(x))
    #         if (len(toRem) < 1):
    #             # ERROR
    #             # wx.MessageBox("DONT DO THAT","ERROR",wx.ICON_EXCLAMATION|wx.OK)
    #             return
    #         self.skm.skdbUpdateListMany(0, self.editList, skFToRem)
    #         self.editDisplay.Clear()
    #         for x in self.skm.skdbGetList(self.editList):
    #             self.editDisplay.Append(x.title, x)
    #
    #     def remItem(self, event):
    #         '''
    #         Method that removes singular song from edit list
    #         '''
    #         toRem = self.editDisplay.GetSelections()
    #         if (len(toRem) < 1):
    #             # ERROR
    #             # wx.MessageBox("DONT DO THAT","ERROR",wx.ICON_EXCLAMATION|wx.OK)
    #             return
    #         for x in toRem:
    #             self.skm.skdbUpdateList(0, self.editList, self.editDisplay.GetClientData(x))
    #         self.editDisplay.Clear()
    #         for x in self.skm.skdbGetList(self.editList):
    #             self.editDisplay.Append(x.title, x)
